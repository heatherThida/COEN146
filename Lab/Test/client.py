import socketimport json import sysimport randomdef client(host, port): 	"""Client program modeling TCP interaction with a server"""	address=""	# Resolve the IP Address given the hostname and the port number	try: 		address=socket.getaddrinfo(host,port)	# get eveyrthing you need fto connect to the server	except socket.gaierror: 	# insert error handling code because we couldn't resolve host name		print("could not resolve the hostname")	# Create a socket object with the proper socket specifications.	sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM,0)		#FAMILY: Members of AF_INET address family are IPv4 addresses.		#TYPE: diagram socket, SOCK_DGRAM		#PROTO : defult = 0# _______________________ DONE with making the socket___________________	seq=1	while (1):		packet={}			#ask for the input				message = input("Enter your message:")		#check the FIN		if message=="FIN":			#make the packet			packet["type"]="FIN"			packet["message"]=""			packet["seq"]=0						#send to the server			packet =json.dumps(packet)			sock.sendto(packet.encode(), address[0][4])			#break			break		else:			#make the packet			packet["type"]="MSG"				packet["message"]=message			#emulating random network packet drops			if random.random()<0.5:				packet["checksum"]= -1			else:				packet["checksum"]= sum(ord(char) for char in message)			packet["seq"]=seq			#send to the server			packets =json.dumps(packet)			sock.sendto(packets.encode(), address[0][4])			while(1):			#receive the ack & decode			receive, server_address = sock.recvfrom(500)				receive= receive.decode('ascii', 'ignore')				receive =json.loads(receive)			#check the sequence num			if receive["seq"]== seq+1:				print(receive["message"])				seq +=1				break			else:				print("ack wrong!")			#resend the packet				packet["checksum"]= sum(ord(char) for char in message)				packets =json.dumps(packet)				sock.sendto(packets.encode(), address[0][4])	# Close the socket	sock.close()if __name__ == '__main__':    if len (sys.argv) > 2:        try:            host = sys.argv[1]            port = int(sys.argv[2])            client (host, port)        except:            raise    else:            print ('Usage: python3 client.py host port')