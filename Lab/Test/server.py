import socketimport json import sysdef server(port):        	"""Server program modeling TCP interaction with clients"""	# Create a socket object given the proper socket specifications.	sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM,0)		#FAMILY: Members of AF_INET address family are IPv4 addresses.		#TYPE: diagram socket, SOCK_DGRAM		#PROTO : defult = 0    # Bind the socket object to your localhost and PROTO	host= socket.gethostname()	print(host)	sock.bind((host,port))# _______________________ DONE with making the socket___________________	while (1):		packet={}    	# Receive the message and decode the message		message, address = sock.recvfrom(500)			message= message.decode('ascii', 'ignore')			message= json.loads(message)		# Check if the type is FIN, if it is, then quit.		if message["type"]== "FIN":			print ("Last message. Bye!")			break		else:			#print out the info of message			print("message is:{}".format(message["message"]))			print("message length is:{}" .format(len(message["message"])))			print("sequence number is:{}" .format(message["seq"]))			#check the checksum, create the packet			if sum(ord(c) for c in message["message"]) == message["checksum"]:				#prepare the packet				packet["type"]='ACK'					packet["message"]=message["message"].upper()				packet["seq"]=message["seq"]+1			else:				print("checksum incorrect!")				#reclaim the packet				packet["type"]='ACK'					packet["message"]=message["message"].upper()				packet["seq"]=message["seq"]						#send to the client			packet =json.dumps(packet)			sock.sendto(packet.encode(), address)    # Close the socket	sock.close()if __name__ == '__main__':    if len (sys.argv) > 1:        try:            port = int(sys.argv[1])            print (port)            server (port)        except ValueError:            raise                else:            print ('Usage: python3 server.py port')